name: "GitHub Actions terraform"

on:
  workflow_call:
    inputs:
      kics-ignore:
        default: false
        type: boolean
        description: "ignore kics failure"
      kics-level-failure:
        default: "high,medium"
        type: string
        description: "kics level failure"
      working_directory:
        default: "terraform"
        type: string
        description: "Terraform working directory"
      wiz_policy:
        default: "Default IaC policy"
        type: string
        description: "policy to use with wiz"
      terraform_plan_enable:
        default: false
        type: boolean
        description: "Enable terraform plan"
      terraform_apply_enable:
        default: false
        type: boolean
        description: "Enable terraform auto apply"
      terraform_cloud_provider:
        default: null
        type: string
        description: "Cloud provider managed by terraform"
      terraform_vars:
        default: ""
        type: string
        description: "Terraform Vars, exemple : var1=test var2=test2"
      gcp_project_number:
        default: null
        type: string
        description: "GCP project number"
      gcp_workload_identity_sac_name:
        default: null
        type: string
        description: "Workload identity service account name"
    secrets:
      infracost_api_key:
        description: "Infracost api key"
        required: true
      LVMH_GITHUB_TOKEN:
        description: "Token for get token"
        required: true
      WIZ_CLIENT_ID:
        description: "Wiz Client ID sac"
      WIZ_CLIENT_SECRET:
        description: "Wiz Client Secret sac"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      tf_dirs: ${{ steps.tf_list.outputs.tf_dirs }}
      live_tf_dirs: ${{ steps.tf_list.outputs.live_tf_dirs }}
    env:
      working_directory: ${{ inputs.working_directory }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
        if: github.event_name == 'pull_request'
        with:
          files: ${{ env.working_directory }}

      - name: List tf directories
        id: tf_list
        if: |
          steps.changed-files.outputs.any_changed == 'true' || github.event_name != 'pull_request'
        run: |
          if [ "${{ steps.changed-files.outputs.any_changed }}" == 'true' ]
          then
            dirs="$(for d in ${{ steps.changed-files.outputs.all_changed_files }} ; do echo -n "$(dirname $d) " ; done | sort -u)"
          else
            dirs="${{ env.working_directory }}"
          fi
          all_tf_dirs="$(find ${dirs} \
                             -name '*.tf' \
                             -not -path "*\.terraform*" \
                             -exec dirname {} \; | sort -u | jq -R | jq -scM )"
          live_tf_dirs="$(find ${dirs} \
                             -name '*.tf' \
                             -not -path "*modules*" \
                             -exec dirname {} \; | sort -u | jq -R | jq -scM )"
          echo "tf_dirs=${all_tf_dirs}" 
          echo "live_tf_dirs=${live_tf_dirs}"
          echo "tf_dirs=${all_tf_dirs}" >> $GITHUB_OUTPUT
          echo "live_tf_dirs=${live_tf_dirs}" >> $GITHUB_OUTPUT

  terraform-fmt:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.tf_dirs != null
    strategy:
      matrix:
        tf_dirs: ${{fromJson(needs.setup.outputs.tf_dirs)}}
    steps:
      - name: install tfenv
        run: |
          git clone --depth=1 https://github.com/tfutils/tfenv.git ~/.tfenv
          export PATH=$PATH:$HOME/.tfenv/bin
      - name: Checkout
        uses: actions/checkout@v3
      - name: fmt
        run: |
          cd ${{ matrix.tf_dirs }}
          terraform fmt --check

  terraform-lint:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.tf_dirs != null
    strategy:
      matrix:
        tf_dirs: ${{fromJson(needs.setup.outputs.live_tf_dirs)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/cache@v2
        name: Cache plugin dir
        with:
          path: ~/.tflint.d/plugins
          key: tflint-${{ hashFiles('.tflint.hcl') }}
      - uses: terraform-linters/setup-tflint@v2
        name: Setup TFLint
        with:
          tflint_version: v0.43.0
      - name: Init TFLint
        run: |
          tflint --init
      - name: Run TFLint
        run: |
          cd ${{ matrix.tf_dirs }}
          tflint -f compact

  terraform_plan:
    name: "Plan Terraform"
    runs-on: ubuntu-latest
    if: ${{ inputs.terraform_plan_enable }}
    permissions:
      contents: "read"
      id-token: "write"
    strategy:
      fail-fast: false
      matrix:
        tf_dirs: ${{fromJson(needs.setup.outputs.live_tf_dirs)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: install tfenv
        run: |
          git clone --depth=1 https://github.com/tfutils/tfenv.git ~/.tfenv
      - name: get tfenv tflint_version
        run: |
          cd ${{ matrix.tf_dirs }} 
          echo "tf_version=$(~/.tfenv/tfenv version-name)" >> $GITHUB_ENV

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.tf_version}}

      # Authenticate On providers
      ## GCP
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        if: inputs.cloud_provider == "gcp"
        with:
          workload_identity_provider: projects/${{ inputs.gcp_project_number }}/locations/global/workloadIdentityPools/github-actions-pool/providers/github-action-public
          service_account: ${{ inputs.gcp_workload_identity_sac_name }}

      - name: Configure git
        run: git config --global url."https://oauth2:${{ secrets.LVMH_GITHUB_TOKEN }}@github.com".insteadOf https://github.com

      - name: Terraform init
        run: |
          terraform init -input=false -no-color

      - name: set custom terraform vars
        run: |
          if [ -n "${{ inputs.terraform_vars }}"]
          then
            for vars in ${{ inputs.terraform_vars }}
            do
              echo "TF_VAR_$vars" >> $GITHUB_ENV
            done
          fi

      - name: Terraform plan
        id: plan
        # We run the plan in a distinct command to isolate and ignore the refresh logs
        run: |
          terraform plan -input=false -no-color -out=tfplan \
          && terraform show -no-color tfplan -json > tfplan.json \
          && terraform show -no-color tfplan
      
      - name: Reformat Plan
        run: |
          echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}' \
            | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt
          echo "${{ matrix.plan_environment_variable }}<<EOF" >> $GITHUB_ENV
          cat plan.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
      - uses: actions/upload-artifact@v2
        with:
          name: tfplan
          path: ${{ github.workspace }}/tfplan.json

      - name: Post Plan to GitHub PR
        uses: mshick/add-pr-comment@v1
        if: ${{ github.event_name  == 'pull_request' }}
        with:
          allow-repeats: true
          repo-token: ${{ secrets.LVMH_GITHUB_TOKEN }}
          repo-token-user-login: "github-actions[bot]"
          message: |
            ## ${{ matrix.environment_name }} plan
            ```diff
            ${{ env[matrix.plan_environment_variable] }}
            ```

  terraform-kics-base:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.tf_dirs != null
    steps:
      - uses: actions/checkout@v3
      - name: run kics Scan
        uses: checkmarx/kics-github-action@v1.6
        continue-on-error: ${{ inputs.kics-ignore }}
        with:
          path: ${{ join(fromJson(needs.setup.outputs.tf_dirs)) }}
          output_path: myResults/
          token: ${{ secrets.GITHUB_TOKEN }}
          fail_on: ${{ inputs.kics-level-failure }}
          enable_comments: true
      - name: display kics results
        run: |
          cat myResults/results.json

  terraform-kics-tfplan:
    runs-on: ubuntu-latest
    needs: terraform_plan
    strategy:
      fail-fast: false
      matrix:
        tf_dirs: ${{fromJson(needs.setup.outputs.live_tf_dirs)}}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v2
        with:
          name: tfplan ${{ matrix.tf_dirs }}
      - name: run kics Scan
        uses: checkmarx/kics-github-action@v1.6
        continue-on-error: ${{ inputs.kics-ignore }}
        with:
          path: tfplan.json
          output_path: myResults/
          token: ${{ secrets.GITHUB_TOKEN }}
          fail_on: ${{ inputs.kics-level-failure }}
          enable_comments: true
      - name: display kics results
        run: |
          cat myResults/results.json

  infracost:
    name: Infracost
    runs-on: ubuntu-latest
    #needs: setup
    permissions:
      contents: read
      pull-requests: write
    env:
      working_directory: ${{ inputs.working_directory }}
      LVMH_GITHUB_TOKEN: ${{ secrets.LVMH_GITHUB_TOKEN }}
    # strategy:
    #   matrix:
    #     tf_dirs: ${{fromJson(needs.setup.outputs.live_tf_dirs)}}
    steps:
      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        # See https://github.com/infracost/actions/tree/master/setup for other inputs
        # If you can't use this action, see Docker images in https://infracost.io/cicd
        with:
          api-key: ${{ secrets.infracost_api_key }}

      - name: setup github config for private modules
        run: |
          git config \
            --global url."https://$LVMH_GITHUB_TOKEN@github.com".insteadOf https://github.com

      - name: Checkout base branch
        uses: actions/checkout@v3
        with:
          ref: "${{ github.event.pull_request.base.ref }}"

      # Generate Infracost JSON file as the baseline.
      - name: Generate Infracost cost estimate baseline
        run: |
          infracost breakdown --path=${working_directory} \
                              --format=json \
                              --out-file=/tmp/infracost-base.json \
                    || export BASE_TF="false" && export BASE_TF="true"

      # Checkout the current PR branch so we can create a diff.
      - name: Checkout PR branch
        uses: actions/checkout@v3

      - name: Generate Infracost report
        run: |
          if [ -f /tmp/infracost-base.json ]
          then
              infracost diff --path=${working_directory} \
                          --format=json \
                          --compare-to=/tmp/infracost-base.json \
                          --out-file=/tmp/infracost.json
          else
              if [ "${{ github.event_name }}" == 'pull_request' ]
              then
                infracost breakdown --path=${working_directory} \
                                    --format=json \
                                    --out-file=/tmp/infracost.json
              else
                infracost breakdown --path=${working_directory}
              fi
          fi
      - name: Post Infracost comment
        if: github.event_name == 'pull_request'
        run: |
          infracost comment github --path=/tmp/infracost.json \
                                   --repo=$GITHUB_REPOSITORY \
                                   --github-token=${{github.token}} \
                                   --pull-request=${{github.event.pull_request.number}} \
                                   --behavior=update

  wiz-cli-iac-scan:
    name: "Wiz-cli IaC Scan"
    runs-on: ubuntu-latest
    env:
      SCAN_PATH: ${{ inputs.working_directory }}
      POLICY: ${{ inputs.wiz_policy }}
      WIZ_CLIENT_ID: ${{ secrets.WIZ_CLIENT_ID }}
      WIZ_CLIENT_SECRET: ${{ secrets.WIZ_CLIENT_SECRET }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Check out repository
        uses: actions/checkout@v2
        if: ${{ env.WIZ_CLIENT_ID != null }}

      - name: Download Wiz-cli
        run: curl -o wizcli https://wizcli.app.wiz.io/wizcli && chmod +x wizcli
        if: ${{ env.WIZ_CLIENT_ID != null }}

      - name: Authenticate to Wiz
        run: ./wizcli auth --id "$WIZ_CLIENT_ID" --secret "$WIZ_CLIENT_SECRET"
        if: ${{ env.WIZ_CLIENT_ID != null }}

      - name: Run wiz-cli IaC scan
        run: ./wizcli iac scan --path $SCAN_PATH --policy "$POLICY"
        if: ${{ env.WIZ_CLIENT_ID != null }}



